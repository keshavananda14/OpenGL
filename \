// Programmer: Mihalis Tsoukalos
// Date: Wednesday 04 June 2014
//
// A simple OpenGL program that draws a triangle.

/* Compile with "gcc IndianFlag.cpp -lGL -lglut" command */

#include "GL/freeglut.h"
#include "GL/gl.h"
#include <stdio.h>
#include <cmath>

#define PI 3.14
using namespace std;
void DrawStar() 
{
	glBegin(GL_TRIANGLE_FAN);
		//All triangles fan out starting with this point
		glVertex2f (0.5,0.5);
		for (int i = 0; i <=360; i++)
		{				
				//glColor3f(float(rand())/float(RAND_MAX), 
				  //              float(rand())/float(RAND_MAX), 
				    //            float(rand())/float(RAND_MAX));
glColor3f(0.0,0.0,1.0);
				glVertex2f(0.1*cos(i*PI/180)+0.5, 0.1*sin(i*PI/180)+0.5);
		}
	glEnd();
#if 0
	const float kfPi = 3.1415926535897932384626433832795;
	// Draw ten triangles
	const float kfRadius = 0.0616/2.0;
	const float kfInnerRadius = kfRadius*(1.0/(sin((2.0*kfPi)/5.0)*2.0*cos(kfPi/10.0) + sin((3.0*kfPi)/10.0)));
	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_TRIANGLE_FAN);
		glVertex3f(475.0, 250.0, 0.0);
		//glVertex3f(950.0/2.0, 500.0/2.0, 0.0);
		for (int iVertIndex = 0; iVertIndex < 48; ++iVertIndex) {
			float fAngleStart	= kfPi/2.0 + (iVertIndex*2.0*kfPi)/10.0;
			float fAngleEnd		= fAngleStart + kfPi/5.0;
			if (iVertIndex % 2 == 0) {
				glVertex3f(475.0 + kfRadius*cos(fAngleStart)/1.9, 250.0 + kfRadius*sin(fAngleStart), 0.0);
				glVertex3f(475.0 + kfInnerRadius*cos(fAngleEnd)/1.9, 250.0 + kfInnerRadius*sin(fAngleEnd), 0.0);
			} else {
				glVertex3f(475.0 + kfInnerRadius*cos(fAngleStart)/1.9, 250.0 + kfInnerRadius*sin(fAngleStart), 0.0);
				glVertex3f(475.0 + kfRadius*cos(fAngleEnd)/1.9, 250.0 + kfRadius*sin(fAngleEnd), 0.0);
			}
		}
	glEnd();
	glColor3f(0.0,0.0, 1.0);
	glBegin (GL_LINES);
	glVertex3f(0.5 - 0.1/1.9,0.5,0.0);
	glVertex3f(0.5 + 0.1/1.9,0.5,0.0);
	glVertex3f(0.5,0.4,0.0);
	glVertex3f(0.5,0.6,0.0);
	glVertex3f(0.5 - 0.075/1.9,0.45,0.0);
	glVertex3f(0.5 + 0.025/1.9,0.65,0.0);
	glVertex3f(-0.2,-0.1,0.0);
	glVertex3f(-0.1,0.0,0.0);
	glVertex3f(-0.2,0.05,0.0);
	glVertex3f(-0.1,0.1,0.0);
	glEnd();
	glFlush(); 
#endif
	return;
}

void DrawStripes() 
{
		glColor3f(18.0/255.0,136.0/255.0, 7.0/255.0);
		glBegin(GL_QUADS);
			glVertex3f(0.0, 0.0, 0.0);
			glVertex3f(1.0, 0.0, 0.0);
			glVertex3f(1.0, 1.0/3.0, 0.0);
			glVertex3f(0.0, 1.0/3.0, 0.0);
		glEnd();
		glColor3f(1.0, 1.0, 1.0);
		glBegin(GL_QUADS);
			glVertex3f(0.0, 1.0/3.0, 0.0);
			glVertex3f(1.0, 1.0/3.0, 0.0);
			glVertex3f(1.0, 2.0/3.0, 0.0);
			glVertex3f(0.0, 2.0/3.0, 0.0);
		glEnd();
		glColor3f(1.0, 153.0/255.0, 51.0/255.0);
		glBegin(GL_QUADS);
			glVertex3f(0.0, 2.0/3.0, 0.0);
			glVertex3f(1.0, 2.0/3.0, 0.0);
			glVertex3f(1.0, 3.0/3.0, 0.0);
			glVertex3f(0.0, 3.0/3.0, 0.0);
		glEnd();
		glColor3f(0.0, 0.0, 1.0);
#if 1
		glBegin(GL_TRIANGLE_FAN);
			/*glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.5, 0.6, 0.0);	
			glVertex3f(0.55, 0.6, 0.0);	
			glVertex3f(0.6, 0.5, 0.0);	
			glVertex3f(0.55, 0.45, 0.0);	
			glVertex3f(0.5, 0.4, 0.0);	
			glVertex3f(0.45, 0.45, 0.0);	
			glVertex3f(0.4, 0.5, 0.0);	
			glVertex3f(0.45, 0.55, 0.0);	
			glVertex3f(0.5, 0.6, 0.0);	*/
#else
			glBegin (GL_LINES);
			int i = 0, j = 0;
			float x = 0.5, y = 0.6;
			for(i = 0;i < 24;i++)
			{
				if(i > 0 && i < 6)
				{
					x = x + 0.015;
					y = y - 0.015; 
				}
				else if(i == 6)
				{
					x = 0.6;
					y = 0.5; 
				}
				else if(i > 6 && i < 12)
				{
					x = x - 0.015;
					y = y - 0.015; 
				}
				else if(i == 12)
				{
					x = 0.5;
					y = 0.4; 
				}
				else if(i > 12 && i < 18)
				{
					x = x - 0.015;
					y = y + 0.015; 
				}
				else if(i == 18)
				{
					x = 0.4;
					y = 0.5; 
				}
				else if(i > 18 && i < 24)
				{
					x = x + 0.015;
					y = y + 0.015; 
				}
				
				glVertex3f(0.5, 0.5, 0.0);	
				glVertex3f(x, y, 0.0);	
			}
#if 0
			glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.5, 0.6, 0.0);	
			glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.58, 0.58, 0.0);	
			glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.6, 0.5, 0.0);	
			glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.58, 0.42, 0.0);	
			glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.5, 0.4, 0.0);	
			glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.45, 0.45, 0.0);	
			glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.4, 0.5, 0.0);	
			glVertex3f(0.5, 0.5, 0.0);	
			glVertex3f(0.45, 0.55, 0.0);	
			glVertex3f(0.5, 0.6, 0.0);	
			glVertex3f(0.58, 0.58, 0.0);	
			glVertex3f(0.58, 0.58, 0.0);	
			glVertex3f(0.6, 0.5, 0.0);	
			glVertex3f(0.6, 0.5, 0.0);	
			glVertex3f(0.58, 0.42, 0.0);	
#endif
#endif
		glEnd();

		//printf("===== iStripeIndex = %d ====== fStartY = %f \n",iStripeIndex,fStartY);
}

void drawTriangle()
{
	glClear(GL_COLOR_BUFFER_BIT);
	DrawStripes();
	DrawStar();
	glFlush();
}

void Initialize() 
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	//glMatrixMode(GL_PROJECTION);
	//glLoadIdentity();
	glOrtho(0.0, 1.0, 0.0, 1.0, -1.0, 1.0);
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("OpenGL - Creating a Flag");
    Initialize();
    glutDisplayFunc(drawTriangle);
    glutMainLoop();
    return 0;
}
